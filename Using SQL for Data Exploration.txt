Covid 19 Data Exploration 
Skills used: Joins, CTE's ( Common Table Expression), Temp Tables( Creating a table), Windows Functions, Aggregate Functions, Creating Views, Converting Data Types
*/

Select *
From coviddeaths
Where continent is not null 
order by 3,4


-- Select Data that we are going to be starting with

Select Location, date, total_cases, new_cases, total_deaths, population
From coviddeaths
Where continent is not null 
order by 1,2


-- Total Cases vs Total Deaths
-- Shows likelihood of dying if you contract covid in your country

SELECT Location, date, total_cases, new_cases, total_deaths,(total_deaths/ total_cases)*100 AS Deathpercent, population
From coviddeaths$
Where continent is not null AND Location like '%states%'
ORDER BY location,date ;


-- Total Cases vs Population
-- Shows what percentage of population infected with Covid

SELECT Location, date, population, total_cases, new_cases, total_deaths,(total_cases/population)*100 as infected_population_percent
From coviddeaths$
Where continent is not null AND Location like '%states%'
ORDER BY location,date ;

-- Countries with Highest Infection Rate compared to Population

SELECT Location, population, max(total_cases) as highest_infected_rate, max((total_cases/population))*100 as infected_population_percent
From coviddeaths$
GROUP BY location, population
ORDER BY 4 ;


-- Countries with Highest Death Count per Population

Select Location, MAX(cast(Total_deaths as int)) as TotalDeathCount
From coviddeaths$
WHERE continent is not null
Group by Location
order by TotalDeathCount desc



-- BREAKING THINGS DOWN BY CONTINENT

-- Showing contintents with the highest death count per population(CREATING A VIEW FOR TABLEAU)

CREATE VIEW AS 
Select continent, MAX(cast(Total_deaths as int)) as TotalDeathCount
From coviddeaths$
Where continent is not null 
Group by continent
order by TotalDeathCount desc



-- GLOBAL NUMBERS

SELECT date, sum(total_cases) AS TOTAL_CASES, sum(CAST(total_deaths AS int)) AS TOTAL_DEATHS, (TOTAL_DEATHS/TOTAL_CASES) AS DeathPercentage FROM coviddeaths$
WHERE total_cases is not NULL
GROUP BY date, TOTAL_CASES,TOTAL_DEATHS
ORDER BY date;



-- Total Population vs Vaccinations
-- Shows Percentage of Population that has recieved at least one Covid Vaccine

SELECT CD.continent, CD.location, CD.date, CD.population, CV.new_vaccinations, 
SUM(CONVERT(INT, new_vaccinations)) OVER (PARTITION BY CD.location ORDER BY CD.location, CD.date) AS ROLLING_COUNT
FROM coviddeaths$ AS CD
JOIN covidvax$ AS CV 
ON CD.location = CV.location AND CD.date = CV.date
WHERE CD.continent IS not NULL
ORDER BY CD.location, CD.date;



-- Using CTE to perform Calculation on Partition By in previous query

WITH POPVSVAC (continent, location, date, population,new_vaccinations, ROLLING_COUNT )
AS 
( 
SELECT CD.continent, CD.location, CD.date, CD.population, CV.new_vaccinations, 
SUM(CONVERT(INT, new_vaccinations)) OVER (PARTITION BY CD.location ORDER BY CD.location, CD.date) AS ROLLING_COUNT
FROM coviddeaths$ AS CD
JOIN covidvax$ AS CV 
ON CD.location = CV.location AND CD.date = CV.date
WHERE CD.continent IS not NULL
)
SELECT *,(ROLLING_COUNT/population)*100  FROM POPVSVAC
ORDER BY location,date
;


-- Using Temp Table to perform Calculation on Partition By in previous query

DROP Table if exists #PercentPopulationVaccinated

CREATE TABLE NEW_POPVSVAC# 
(continent nvarchar(255),
  location nvarchar(255),
  date datetime,
  population numeric(38,4),
  new_vaccination numeric (38,4),
  ROLLING_COUNT	numeric(38,4)
 )
INSERT INTO NEW_POPVSVAC#
SELECT CD.continent, CD.location, CD.date, CD.population, CV.new_vaccinations, 
SUM(CAST(new_vaccinations as numeric(38,4))) OVER (PARTITION BY CD.location ORDER BY CD.location, CD.date) AS ROLLING_COUNT
FROM coviddeaths$ AS CD
JOIN covidvax$ AS CV ON CD.location = CV.location AND CD.date = CV.date

SELECT *,(ROLLING_COUNT/population)*100  
FROM NEW_POPVSVAC#

SELECT * FROM NEW_POPVSVAC#;




-- Creating View to store data for later visualizations

CREATE VIEW PercentPopulationVaccinated# AS
SELECT CD.continent, CD.location, CD.date, CD.population, CV.new_vaccinations, 
SUM(CONVERT(INT, new_vaccinations)) OVER (PARTITION BY CD.location ORDER BY CD.location, CD.date) AS ROLLING_COUNT
FROM coviddeaths$ AS CD
JOIN covidvax$ AS CV ON CD.location = CV.location AND CD.date = CV.date
WHERE CD.continent IS NOT NULL;